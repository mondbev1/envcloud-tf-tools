#!/usr/bin/env bash
KUBE_PS1_NS_ENABLE="${KUBE_PS1_NS_ENABLE:-true}"
KUBE_PS1_CONTEXT_ENABLE="${KUBE_PS1_CONTEXT_ENABLE:-true}"
KUBE_PS1_LAST_TIME=0
KUBE_PS1_KUBECONFIG_CACHE="${KUBECONFIG}"
KUBE_PS1_CLUSTER_FUNCTION="${KUBE_PS1_CLUSTER_FUNCTION}"
KUBE_PS1_NAMESPACE_FUNCTION="${KUBE_PS1_NAMESPACE_FUNCTION}"
KUBE_PS1_BINARY="${KUBE_PS1_BINARY:-kubectl}"
KUBE_PS1_SHELL="bash"
CYAN="\001$(tput setaf 6)\002"
RED="\001$(tput setaf 1)\002"
BLUE="\001$(tput setaf 4)\002"
REST="\001$(tput sgr0)\002"
BRANCH=""

_kube_ps1_init() {
  [[ -f "${KUBE_PS1_DISABLE_PATH}" ]] && KUBE_PS1_ENABLED=off

      _KUBE_PS1_OPEN_ESC=$'\001'
      _KUBE_PS1_CLOSE_ESC=$'\002'
      _KUBE_PS1_DEFAULT_BG=$'\033[49m'
      _KUBE_PS1_DEFAULT_FG=$'\033[39m'
      _kube_ps1_update_cache
      [[ $PROMPT_COMMAND =~ _kube_ps1_update_cache ]] || PROMPT_COMMAND="_kube_ps1_update_cache;${PROMPT_COMMAND:-:}"
}

_kube_ps1_binary_check() {
  command -v $1 >/dev/null
}

_kube_ps1_split() {
  type setopt >/dev/null 2>&1 && setopt SH_WORD_SPLIT
  local IFS=$1
  echo $2
}

_kube_ps1_file_newer_than() {
  local mtime
  local file=$1
  local check_time=$2
  mtime=$(stat -L -c %Y "${file}")
  [[ "${mtime}" -gt "${check_time}" ]]
}

_kube_ps1_update_cache() {
  local return_code=$?

  [[ "${KUBE_PS1_ENABLED}" == "off" ]] && return $return_code
  if ! _kube_ps1_binary_check "${KUBE_PS1_BINARY}"; then
    # No ability to fetch context/namespace; display N/A.
    KUBE_PS1_CONTEXT="BINARY-N/A"
    KUBE_PS1_NAMESPACE="N/A"
    return
  fi

  if [[ "${KUBECONFIG}" != "${KUBE_PS1_KUBECONFIG_CACHE}" ]]; then
    # User changed KUBECONFIG; unconditionally refetch.
    KUBE_PS1_KUBECONFIG_CACHE=${KUBECONFIG}
    _kube_ps1_get_context_ns
    return
  fi

  local conf
  for conf in $(_kube_ps1_split : "${KUBECONFIG:-${HOME}/.kube/config}"); do
    [[ -r "${conf}" ]] || continue
    if _kube_ps1_file_newer_than "${conf}" "${KUBE_PS1_LAST_TIME}"; then
      _kube_ps1_get_context_ns
      return
    fi
  done

  return $return_code
}
_kube_ps1_get_context() {
  if [[ "${KUBE_PS1_CONTEXT_ENABLE}" == true ]]; then
    export KUBE_PS1_CONTEXT="$(${KUBE_PS1_BINARY} config current-context 2>/dev/null)"
    # Set namespace to 'N/A' if it is not defined
    KUBE_PS1_CONTEXT="${KUBE_PS1_CONTEXT:-N/A}"

    if [[ ! -z "${KUBE_PS1_CLUSTER_FUNCTION}" ]]; then
      KUBE_PS1_CONTEXT=$($KUBE_PS1_CLUSTER_FUNCTION $KUBE_PS1_CONTEXT)
    fi
  fi
}
_kube_ps1_get_ns() {
  if [[ "${KUBE_PS1_NS_ENABLE}" == true ]]; then
    KUBE_PS1_NAMESPACE="$(${KUBE_PS1_BINARY} config view --minify --output 'jsonpath={..namespace}' 2>/dev/null)"
    # Set namespace to 'default' if it is not defined
    KUBE_PS1_NAMESPACE="${KUBE_PS1_NAMESPACE:-default}"

    if [[ ! -z "${KUBE_PS1_NAMESPACE_FUNCTION}" ]]; then
        KUBE_PS1_NAMESPACE=$($KUBE_PS1_NAMESPACE_FUNCTION $KUBE_PS1_NAMESPACE)
    fi
  fi
}
_kube_ps1_get_context_ns() {
  KUBE_PS1_LAST_TIME=$(printf '%(%s)T')
  _kube_ps1_get_context
  _kube_ps1_get_ns
}
_kube_ps1_init

kube_ps1() {
  [[ "${KUBE_PS1_ENABLED}" == "off" ]] && return
  [[ -z "${KUBE_PS1_CONTEXT}" ]] && [[ "${KUBE_PS1_CONTEXT_ENABLE}" == true ]] && return

  local KUBE_PS1
KUBE_PS1="${BLUE}(${RED}${KUBE_PS1_CONTEXT}:${CYAN}${KUBE_PS1_NAMESPACE}${BLUE})"
echo "${KUBE_PS1}"
}
K8S_PS1=$(kube_ps1)
BRANCH=$(git branch 2>/dev/null | grep \* |  cut -d " " -f 2)
if [ -z $SCHROOT_CHROOT_NAME ]; then
    SCHROOT_CHROOT_NAME=""
fi
if [ -z $BRANCH ]; then
    BRANCH=""
else
    BRANCH="${CYAN}(${BRANCH}) "
fi
if [[ $NAME == "DESKTOP-4IKCB2D" ]]; then
    MY_HOSTNAME="pc"
else
    MY_HOSTNAME=$(hostname)
fi
YAPS1="${BRANCH}${CYAN}\u@${MY_HOSTNAME}${SCHROOT_CHROOT_NAME} ${BLUE}\w ${K8S_PS1}${RED}\n"
YAPS1+="\$ ${REST} "
echo ${YAPS1}
#echo -e "${BRANCH}${CYAN}\u@${MY_HOSTNAME}${SCHROOT_CHROOT_NAME} ${BLUE}\w ${K8S_PS1}${RED} \$${REST} "
